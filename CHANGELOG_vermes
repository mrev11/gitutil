Szokozoket tartalmazo parameterek;
Tevesen gondoltam korabban, hogy a szokozoket tartamazo parameterek
kezelese valtozott a git-ben. A kulonbseg a Windows es Linux kozott van.
Windowson idezojelbe kell tenni a szokozt tartalmazo parametert (miert?).
Linuxon nem szabad idezojelbe tenni. 

A GITUSER-rel keresi a .FILETIME_* es CHANGELOG_* fajlokat; 
Problema volt, hogy kulonbozo gepeken az eltero USER nevek
megnehezitettek a commitolast.  Igy a GITUSER valtozo megadasaval
el lehet takarni a USER (Linux) vagy USERNAME (Windows) valtozot. 

a browse colorspec-ek utkozese javitva;
Az alkalmazasban hasznalt szinek a browse:colorspec 3,4,5 ... 
helyerol atkerultek a 13,14,15, ... helyekre, igy nem utkoznek
az ujabban hasznalatba vett 3-as szinnel, ami a browse savkurzoranak
szinet tartalmazza.
 
ellenorzi, hogy legyen aktualis branch (es legalabb egy commit)
ha nincs branch/commit, lefuttatja create_repo-t, ami egyet commitol; 

uj repo krealas elott ellenorzi, hogy be vannak-e allitva a
    user.email
    user.name
ha nincsenek, akkor nem lehet commitolni;

create_repo elkesziti a scriptek windowsos valtozatat;
scriptek egyszerusitve;

CHANGELOG_%USERNAME%  kepzese javitva Windowson

a caption-ban kiirja a working directoryt

gitref is tudja browseolni a korabbi (esetleg hivatkozas nelkuli)
commitok tartalmat

Local helyett UTC idoket hasznal a fajlidok mentesere; 

README: Yet another Git frontend. 
This one is written in CCC language (a descendant of the old Clipper).

zombik irtasa reaad_output_of()-ban;

filetime-ban a kizart directoryk es kiterjesztesek
megadasa array helyett hashtablaban;
pretty idezese: 2.10.0 folott idez, alatta nem idez
(nem tudom igazabol, hol a hatarvonal, egyelore igy)

filetime-save/restore sha1 kepzes elott kiszedi a fajlokbol a CR-t;
hogyan kell a pretty-t idezni?
nincs eltalava, hol igy rossz, hol ugy
git verzioszam kiirasa indulaskor;

a 'git config'-bol kapott pretty erteket idezetbe kell rakni
(szokozoket tartalmazhat, amitol az ujabb git hibat ad);

leforditva windowson;
fspec.prg atteve filetime-bol az util-ba;
.gitignore bovitve objmng/-vel;
egyseges parfile.bld-k windows/linuxon;
gitnav.prg-ben --pretty:="%h %s" helyett --pretty:='"%h %s"';
a .git directory keresesekor bekapcsolva a H attributum;
util.prg: windowson a tempfile nem tud /tmp/-ben keletkezni;
mindenhol letrehozva az m.bat-ok;
a parancsokban levo $USER-t mar a prograban kell helyettesiteni;
mergestatus.prg: remote/branch elvalasztoja mindig '/', nem pedig dirsep();  

parfile-k javitgatva, hogy linuxon es win-en is jo legyen;

createrepo initial import csak a CHANGELOG-ot veszi be;
(hogy legyen alkalom a tenyleges import elott .gitignore-t modositani)
.gitignore bovult ilyenekkel: o, obj, a, lib, so, class, jar... 

zbrowse:loop-ban K_HOME, K_END fel-le mozgat;
a tree (directory) browseba beteve ".." a felfele valtashoz;

gitnav atveszi a parancssori parametereket; 
A parancssori parametereket tovabbadja a git log parancsnak, 
ezzel alakithato a browse message oszlopanak tartalma,
pl. "--pretty=%h %cd %s" beveszi a message oszlopba a datumot.
Olyan --pretty opciot kell megadni, ami "%h "-val kezdődik.
Hagyja ervenyesulni a .git/config-ban megadott format.pretty 
es log.date parametereket. A program sajat defaultja:
"--pretty=%h %s" es "--date=short".

.git/local/profile script;
.git/local/log-commit-ban naplozza a commitokat;
gc,gn,gv scriptek felujitva;


branch menu atalakitva;
Korabban csak commitolt allapotban lehetett branchot valtani,
az uj valtozat egyszeruen vegrehajtja a "git co <branch>"-ot
es tudosit az eredmenyrol. Az eredmenyt mutato zbrowse fel van
szerelve kenyelmi funkciokkal: K_TAB valtogat a ket branch
kozott, K_CTRL_D mutatja a modosult fajlok diffjet;
doksi hozzaigazitva a valtozasokhoz;


zbrowse felszerelve a copy (edit) funkcioval;

fetch statusz zbrowse atalakitva;

browsecommit atalakitva;

debug GITDEBUG=goc (g:gitcmd, o:output, c:callstack);
menu szovegek javitgatva;

zbrowseba colorblock, tartalomtol fuggo szinezes;
directoryk browseolasakor directoryk es fajlok kulonbozo szinnel;
fetch-statuszban a mergelheto branchok szinnel kiemelve;
gitview "fuggvenyesitese" javitva

gitnav-ban "Status" menu, diff, add, reset, cehckout funkciokkal;
gitstat menu funkcioi pontositva (resetone, checkout komplikalt);
specialis fajlnevek escapelve, idezve, idezojel leszedve, stb.
megjegyzes:
    PrepCommit a  "git diff --name-status com1 com2 -- "
    Status     a  "git status --short" 
eredmenyebol dolgozik, hasonlo, de megsem ugyanaz;
gitview subdir torolve (minden atkerult gitnav-ba);


git repo automatikus letrehozasa;
ha nem egy git wt-ben indul a progam,
felajanlja a repo letrehozasat;

gitview athozva gitnav-ba;
run gitview.exe fuggvenyesitve -> do_gitview();
kulon gitview.prg (benne main) az onallo programnak;
uj program gitstat;
run gitstat.exe fuggvenyesitve -> do_gitstat();
kulon gitstat.prg (benne main) az onallo programnak;
gitnav-ban uj menu Status: add/reset a fajlokra;
fetch status zbrowseban CTRL_P pushol a kivalasztott remoteba

intelligensebb fajl-browse:
a directoryk eloszor "csukva" vannak, K_ENTER-rel lehet belemenni;
zbrowse helpje kihagyja azokat a shortcutokat, amiknek nincs szovege;

reset eredmenyenek ellenorzese;

zbrowse help pozicionalas javitva;
doksi javitgatva.

gitnav: fetch statuszban K_CTRL_R -> rebase (merge helyett rebase);
gitnav: fetch statuszban K_CTRL_D -> gitview a kivalasztott branchra;
gitview: rebase continue funkcio;
gitview: rebase abort funkcio;
menuk neve, help szovege, sorrendje valtozott;
doksi bovult;

rovid leiras doc/gitnav.txt-ben;

atrakva CCC2-re;

egyseges debugolas GITDEBUG=yes beallitassal;
a git parancsokat es azok kimenetet listazza;
opcio: -<number>, maximalja a browse sorok szamat (default -32); 

a zbrowse-ok F1-re helpet adnak a shortcutokrol;

Snapshot DIRTY allapotban force-olhato;
Snapshot menuben checkout fv nev helyett snapshot;

gitref-ben status oszlop, reset menu;
commit eredmenyenek megjelenitese;
felesleges scriptek torolve;
gcl -> gc;
gco nem kell, mert a gitnav-bol commitolunk;
gfe nem kell, mert a gitnav-bol fetchelunk;
gmr nem kell, mert a gitnav-bol mergelunk;
gst nem kell, mert egyszerubb beirni;
marad: gc clean, gn gitnav, gv gitview;


gitnav-ba PrepareCommit menu -> gitview;
(gitview.prg szetvagdalva);
gitview-ba add, (fajlonkenti) reset, commit;
commit utan gitnav browsea ujra inicializalva;
merge utan automatikusan run filetime-restore.exe

fetch menu; 
fetch statuszt mutato zbrowseban CTRL_M merge;
branch status oszlop:
local branchokat a branch kezdobetuje jeloli (pl. d);
remote branchokat a remote es branch kezdobetui jelolik (pl. om);
branchok szokozzel elvalasztva;
az elagazott branchokat ! jeloli;
status oszlop szelessege alkalmazkodik branchok szamahoz;
dirty allapot jelzese a menuname-ben;
gitnav szetvagdalva;
gitnav installalja post-checkout-ot;


browseolja a kivalasztott commit fajljait;
mutatja a kivalasztott fajl tartalmat; 
zframe/zbrowse objektumok a fajlok megjelenitesere;
CTRL_B valt a plain es blame modok kozott;
git mukodes felderitese;
javitgatas, kommenteles;
sajat dokumentacio irkalasa


gitview-ba INS-re git blame
timezone teszteles
gitnav-ban INS-re  mutatjuk a commit log-jat
gitnav-ban átírva a branch oszlop szamitasa


atteres static linkelesre, hogy a CCC clean
allapotaban is lehessen kezelni a CCC repot
gitref program a reflog browseolasara

javitgatas, kommenteles

filetime-save/restore-ban a loadhash kikeruli
a git merge conflict-okat jelolo sorokat
gmr script (emlekezteto hogyan kell mergelni)

.git/local egyeni scriptek
A g-* és *.savex scriptek ignoraltak.
Uj scriptek: gcl, gco, gst
Koncepcio az egyeni scriptek elhelyezesere:
A .git/local-ba (uj directory) tesszuk az egyeni scriptjeinket. 
Az itt levo dolgok nem kerulnek be a repoba, es nem torli oket 
a clean. Emellett olyan fájlneveket hasznalunk, amit .gitignored 
ignoral. A local-ban levo scripteket atlinkeljuk a gyokerbe, 
a nevuk miatt azonban a linkek sem kerulnek be a mentesbe. 
Ha ezutan egy git clean letorli a linkeket, akkor ezeket 
egyszeruen ujra lehet csinalni.  A gitnav-ba bele van epitve
ezeknek a linkeknek a legyartasa.
A gcl script letorli az ignoraltakat (ppo, objlin, stb.),
ezekkel egyutt torlodnek az egyeni scriptjeink linkjei,
de a linkeket rogton ujra megcsinalja.


gitnav: HEAD<>HEAD helyett HEAD<-NEXT osszehasonlitas

Rossz lett a chekout, mert a commit átkerült a 2. oszlopba.
Javítva

gitnav-ban soft reset
gitnav browseban az origin megjelenitve
gitnav browseban a branchek megjelenitve
gitnav-ban átállás read_output_of-re (memoread helyett)
utility-k kulonveve
irogatom a sajat dokumnetaciomat es megjegyzeseimet
gitnav: menubol inditja gitview-t
gitview: automatikusan megkeresi a git tree gyokeret
irogatom a sajat dokumnetaciomat es megjegyzeseimet


gitnav: co feluliras elleni vedelem finomitva

kimaradt a filetime
  Teljesen kimaradt a filtime directory a repobol, 
  erthetetlen, hogy miert, ugyanis rengetegszer volt
  git add --all, es a .gitignore-ban nem volt kizarva.
  Elmozgattam, visszaraktam, akkor vegre bevette.
  Most az a furcsa allapot, hogy (git st szerint)
  a filetime directory torlodni fog (D), a benne levo
  fajlok viszont hozzaadodnak (A).

g-initial-upload-2 script javitva

g-initial-upload-2 script
  gyakorlaskeppen felrakom a repot a comfirm.hu-ra
  elozoleg ki kell valasztani a master-t


g-commit-ba felveve 'git add --all'
  enelkul ugyanis az automatikusan keszulo .FILETIME
  maris valtozast okoz a commithoz kepest, marpedig
  egy commit utan legyen tiszta a working tree


gitnav veszelytelenitve
  kilep, ha a working treeben valtozasok vannak,
  ui. minden funkcioja olyan checkout, ami leszed
  a working treeben barmilyen valtozast


m scriptek felujitva: exe-k ~/bin-be
debug kiirasok kiveve
szemetek torolve



