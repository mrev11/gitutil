

Előzetes a gitnav használatához

A csupasz git-hez képest használunk néhány konvenciót, és
a programnak is van egy saját berendezkedése. Ha a gitnavot
elindítjuk egy git working tree-ben, akkor első dolgaként 
megkeresi a wt gyökerét (ahol a .git van), oda cd-zik, 
és a továbbiakban onnan dolgozik. Ha nem egy git wt-ből
indítottuk, akkor felajánlja, hogy az aktuális directoryban 
létrehoz egy új repót, amiben berendezkedik, és rögtön 
commitolja a wt kezdeti tartalmát. (Vigyázzunk ezért, nehogy 
egy óvatlan indítással valami nagy-nagy directoryt kezdjünk 
el véletlenül bepakkolni a gitbe.) Ha viszont elindítjuk
egy üres directoryban, és hagyjuk, hogy létrehozza az új repót,
akkor alkalmunk nyílik szemügyre venni a gitnav berendezkedését.

Abból indulunk ki, hogy programozók egy csoportja közösen 
dolgozik egy projekten. Első körben minden tag a saját otthoni
repójába commitol és időnként a változásokat feltölti a közös 
repóba. Mindenki vezet egy naplót (changelogot) a változtatásairól,
és ez a changelog szintén bekerül a közös repóba, amin keresztül
a fetchelések során minden changelog eljut minden egyéni repóba. 
Ha mindenki ugyanazt a changelog fájlt használná, akkor állandóan 
bajlódni kellene a merge conflictokkal. Ezért megállapodás szerint 
mindenki a CHANGELOG_$USER fájlba írja a változásokat.

Gyakori, akár 10 percenkénti committal dolgozunk. Természetesen
ezeket a commitokat nem mind töltjük fel a központi repóba. 
(A közreadásra szánt commitokat külön meg kell szerkeszteni.)
A gyors commitot mindenesetre akadályozza, ha a git folyvást
a commit message után érdeklődik. Ezért a gitnav program 
automatikuksan a CHANGELOG_$USER fájl legfelső, üres sorokkal
határolt bekezdéséből készít egy commit message-et.

Szerintünk dokumentációs értéke van a fájlok valódi módosítási 
idejének. Az én szívemet például melegség árasztja el, ha találkozom
egy régi programommal, ami már a múlt évezred óta változatlan.
A fájlidők megőrzésére szolgálnak a .FILETIME_$USER nevű szöveges
adatbázisfájlok, amikbe commitkor automatikusan beíródik minden
fájl dátumideje. Ezek a .FILETIME_$USER fájlok a közös repón
keresztül szintén forognak, mindegyik eljut minden egyéni repóba.
Az automatikusan elinduló checkout hook minden fájlra megkeresi a 
.FILETIME fájlokban található legrégebbi időt, amit feltesz a fájlra.
Így néhány commit-fetch-checkout kör után minden programozónál
beáll a fájlok eredeti (legrégebbi) ideje.

A gitnav létrehozza a .git/local directoryt, amibe a programozó
olyan egyéni akármiket tárolhat, amiket nem akar feltölteni
a közös repóba. A gitnav induláskor végrehajtja  (source-olja) a 
.git/local/profile scriptet, ami tetszés szerint bármire használható.
A gitnav vezet egy naplót .git/local/log-commit-ban, amibe commitkor
beírja a commit SHA1 ID-jét, hogy összevissza resetelések után is 
visszataláljunk az elhagyott ágak végére. (A reflog is erre való, 
de a túl sok információ miatt nehezebb benne kiigazodni.)



Ezekből a programokból áll a project:

============================================================================
filetime-save, filetime-restore
============================================================================
    Commit előtt megjegyzik, checkout után visszaállítják
    a fájlidőket. Az infó userenként külön, egy .FILETIME_$USER
    nevű fájlban tárolódik, ami mindig commitolódik a repóba.
    A gitnav-ba bele van építve ezek indítása, a .FILETIME_$USER
    fájlok commitolása, másrészt installálódik egy post-checkout 
    hook, ami checkout után futtatja filetime-restore-t.


============================================================================
firstpar
============================================================================
    A CHANGELOG_$USER fájl legfelső bekezdéséből csinál egy
    commit-message fájlt, amit a commitnál használ a program.
    A gitnav automatikusan futtatja a firstpar-t, tehát
    a gitnavból végrehajtott commitkor már nincs kérdezősködés
    a commit message után, hanem bármi is a CHANGELOG_$USER első
    bekezdése, az lesz a commit message.
 

============================================================================
gitref
============================================================================
    Browseolja a reflogot, a kiválasztott commithoz mozgatja
    a HEAD-et soft resettel.


============================================================================
gitview
============================================================================
    Mutatja két tetszőleges commit diffjét. Például 

    gitview devel master   (a devel és a master ág hegyének diffje) 
    gitview HEAD^^ [HEAD]  (diff a kettővel ezelőtti committal) 

    Speciális: Paraméter nélkül gitview a HEAD és az index 
    diffjét muatatja, ilyenkor egy helyett négy menüpontja van:  

    Add     - Minden változást berak az indexbe (git add --all).
    Diff    - Fájlonként mutatja az indexbeli és a HEAD-beli szöveg diffjét.
    Reset   - A kiválaszott fájlt kiveszi az indexből.
    Commit  - Az index maradék állapotával végrehajtja a commitot.  

    Tehát: Add-dal minden változást egyszerre beveszünk az indexbe,
    a változásokat ellenőrizzük a Diff-fel, amelyik mégsem kell, 
    azt egyenként kihagyjuk a Reset-tel, végül a maradék eredményt
    a Commit-tal commitoljuk.

    Speciális: Megszakadt REBASE állapotban indítva megint csak 
    más menüje van:

    Add     - Minden változást berak az indexbe.
    Diff    - Fájlonként mutatja az index és a HEAD diffjét.
    Continue- Az index bekerül a kicserélt commitba, lezárja a rebaset. 
    Abort   - Abortálja a rebaset.


============================================================================
gitnav
============================================================================
    Browseolja a commitokat (az aktuális ág commitjait a HEAD-től
    visszafelé haladva).
    
Oszlopok:
    
    1) A branchek állapotjelzője (később)
    2) A commitok rövid azonosítója
    3) A commithoz tartozó message eleje  


Shortcut: 
    K_INS mutatja a commit dátumát, szerzőjét, egyéb adatait.


Menü:
    
    [name [DIRTY]]: 
        Mutatja az aktuális ág nevét, mutatja, hogy a
        wt-ben (worktree) vannak-e nem commitolt változások.
    
    
    Status:
        Browseolja a 'git status --short' parancs eredményét.
        A browse egy --- vonallal két részre van osztva.
        A felső részben láthatók a még nem indexelt változások.
        Az alsó részben láthatók a már indexelt változások.

        Diff     - mutatja a kiválasztott fájl és a HEAD diffjét
        AddOne   - a kiválasztott fájlt hozzáadja az indexhez (stage) 
        ResetOne - a kiválasztott fájlt kiveszi az indexből (unstage)
        AddAll   - minden változást bevesz az indexbe 
        ResetAll - minden változást kivesz az indexből 
        Checkout - a kiválasztott fájlt visszaállítja a HEAD-ből

    PrepCommit: 
        Indítja gitview-t, előkészíthetjük a következő commit-ot, 
        vagy lezárhatjuk a megszakadt rebase műveletet, ahogy a 
        gitview-nál írtam.

    FetchMerge: 
        Pulldown. Megnézhetjük a fetch státuszt, fetchelhetünk
        az összes remoteból egyszerre, vagy a remoteokból egyenként.
        Bármelyik választás után a fetch státuszba jutunk, ahol a 
        lokális és remote branchok listját látjuk.  Például:

        devel            656ac0b949 656ac0b949  [ ][D][ ][ ][ ]  behind with 1 commit(s)    
        master           6e1c16484d 6e1c16484d  [ ][ ][ ][ ][ ]  HEAD                       
        develsave/devel  656ac0b949 656ac0b949  [F][D][ ][ ][P]  behind with 1 commit(s)    
        origin/master    656ac0b949 656ac0b949  [F][D][ ][ ][P]  behind with 1 commit(s)    
        
        Az SHA1 kódok közül a baloldali az aktuális branch és az 
        adott branch merge-base-ét mutatja, a jobboldali az adott 
        branch hegyét. Az [F][D][M][R][P] kódok mutatják, ha a branchból
        lehet [F]etchelni, [D]iffelni, [M]ergelni, [R]ebaselni, illetve
        lehet bele [P]usholni. Például, ha a sávkurzorral ráállunk
        egy [M]-mel jelölt branchra, és CTRL_M-et nyomunk, akkor
        meghívódik a merge művelet. 
        
        Shortcutok:
        K_F1     - Help
        K_CTRL_F - Fetch a kiválasztott local/remote branchból
        K_CTRL_D - Diff HEAD és a kiválasztott local/remote branch között
        K_CTRL_M - Merge, HEAD-et mergeli a kiválasztott local/remote branchcsel
        K_CTRL_R - Rebase, HEAD-be mergeli a kiválasztott local/remote branchet
        K_CTRL_P - Push, HEAD-et tölti fel a kiválasztott remote branchba
    
    DiffPrev: 
        A kiválasztott commitot diffeli az eggyel előző
        committal. A diffelés a gitview indításával történik.

    DiffHead: 
        A kiválasztott commitot diffeli a HEAD-del. A diffelés 
        a gitview indításával történik.

    Browse: 
        Ad egy listát (browse-t) a kiválasztott commit összes 
        fájljáról. K_F3-mal lehet keresni a fájlok között. A kiválasztott
        fájlon entert ütve megjelenik a fájl szövege. Itt K_CTRL_B  
        váltogat a síma és a blame mód között. K_F3 keres a fájlban.
    
    Reset: 
        Az aktuális ág (branch) HEAD-jét elmozgatja a sávkurzorral
        kiválasztott commithoz. Az index és a wt változatlan marad.
        Szemléletesen: az aktuális ágat lerövidíti. 
    
    Snapshot: 
        Kibontja a sávkurzorral kiválasztott commitot. A kibontás 
        a "checkout -f <commit>; clean -fxd" parancsokkal történik,
        tehát az adott commit tiszta állapotába jutunk. Ez a művelet
        minden wt-beli változást megszüntet, ezért csak külön
        megerősítés után lehet végrehajtani.

    Branch: 
        Pulldown. Ebben lehet branch-ot váltani, illetve 
        itt is látszik, hogy mi az aktuális ág (* jelzi).  
       
        {***Ez volt az eredeti koncepció, de változtattam: A branch 
        váltás a "checkout -f <branch>; clean -fxd" parancsokkal történik, 
        tehát az új branch tiszta állapotába jutunk. Mivel ez a művelet
        törölné a wt minden változását, a program csak tiszta állapotban
        engedi a végrehajtást. A branch váltás így mindig tiszta állapotból
        tiszta állapotba visz. Emellett a checkout hook-ból végrehajtódó
        filetime-restore miatt a fájlidők is mindig visszaállítódnak
        az eredeti értékre. Mellékhatásként törlődik az összes ignored
        fájl (ppo-k, objectek, exe-k, stb.).***}
        
        Az új koncepcióban a menüpont egyszerűen végrehajtja
        a "git checkout <branch>" parancsot, és az eredményről tudósít. 
        Nem könnyű előre kiszámítani, hogy mikor lesz sikeres a művelet, 
        az eseteket leírtam a git-checkout.txt fájlban. Mindenesetre  
        a checkout nem írja felül a wt-ben levő változásokat. 
    
    
Branch státusz oszlop

    A local és remote branchok vannak itt megjelenítve kezdőbetűkkel.

    Local branch egy betű, pl. master -> m.
    Remote branch két betű, pl. origin/master -> om
    
    Ha egy sorban (egy commitnál) szerepel egy branch jele, 
    az azt jelenti, hogy az adott commit őse az illető branch hegyének.
    Tegyük fel, hogy az aktuális branch a "master", akkor a browse
    a master ág commitjait mutatja.  Vegyük példának  a "devel" branchot, 
    ennek jele "d". Ha a "d" szerepel egy commit sorában, akkor a commit 
    nemcsak a master ág hegyéből (a HEAD-ből), de a devel ág hegyéből 
    indulva is elérhető: commit<-...<-parent<-tip_of_devel (jobbról-balra).
    
    A branchok (kezdőbetűs) jele mellett egy ! karakter jelzi az elágazást.
    Ez azt jelenti, hogy az adott ág hegye nem érhető el a HEAD-ből.
    
    

Hogyan használom 
(csak példák, lehet máshogy is)     

    Mondjuk van egy repó, ahol tárolódik az origin/master,
    ebbe viszi fel a munkáját a programozó csoport.
    
    Az otthoni repómban van egy master branch, amit szinkronban
    akarok tartani az origin/master-rel, és van egy devel branch, 
    amiben szemetelhetek. Akkor ezek vannak:
    
    devel          d       (local)
    master         m       (local)
    origin/master  om      (remote)
    
    A d-ben írom a vackaimat, és 10 percenként commitolok.
    Tegyük fel, hogy eljutottam abba az állapotba, amikor
    a d ág végeredményét érdemes volna közreadni (többek
    között megvan a végleges CHANGELOG_vermes, aminek legfelső 
    bekezdése lesz a commit message). A sok commit miatt azonban
    a d ág nagyon hosszú, tartalmaz egy csomó olyan állapotot, 
    ami a többiek számára érdektelen, sőt zavaró. Ezért mielőtt 
    közreadnám megrendszabályozom. 
    
        A "Reset" menüvel a devel ág végét elmozgatom a master ág 
        végéhez (vagyis d-t visszavágom m-ig). A visszavágás nem 
        változtatja a wt tartalmát, tehát ha csinálok d-ben egy 
        új commitot, akkor a  HEAD a kívánt végállapotban lesz, 
        de csak egy committal lesz hosszabb az m-nél. A commit után 
        átváltok a master branchra. Bemegyek a FetchMerge menübe 
        (fetchelni most nem kell, csak a fetch státusz érdekes), 
        itt látható, hogy lehetséges a merge a devel-ből. Ráállok 
        tehát a sávkurzorral a devel-re, és K_CTRL_M-mel mergelek.
        Mondjuk, rögtön pusholni is akarom a változást az originba,
        ráállok tehát a sávkurzorral az origin/master branchra,
        és K_CTRL_P_vel pusholok. A program az origin/master flagjei
        közül kiveszi a [P]-t. A fő browseban látszik, hogy az m és
        om eggyel följebb jött.
        
        Megjegyzés: Nem feltétlenül szükséges a local master
        branch közbeiktatása. Közvetlenül lehet a local devel-t 
        az origin/master-be pusholni. 


    Tesztelés céljából, mindenféle printelésekkel feldúltam a wt-t, 
    és vissza szeretnék állni az utolsó commitnak megfelelő tiszta 
    állapotra.
    
       A sávkurzorral ráállok a HEAD-re (felső sor), Snapshot-tal 
       (force) kibontom, a Branch menüvel pedig visszaállítom az 
       HEAD-et az előző branchra. 


    Dógozgatok, dógozgatok, de rájövök, hogy amit próbálok hülyeség,
    nem fog működni. Vagy kiderül, hogy egy munkatárs a közösen
    fejlesztett ágban sokkal jobb megoldást talált, ezért a saját
    változatomat el akarom dobni.
    
        A sávkurzorral kiválasztom az utolsó commitot, amit még jónak
        gondolok, a Reset menüvel visszavágom az ágat. A Snapshot
        menüvel kibontom a commitot, szükség esetén akár force-olva,
        majd a Branch menüvel a detached HEAD állapotból visszaállok
        a normál állapotra.
    
    
    Valami miatt eszembe jut, hogy elő akarom venni a források
    egy évvel korábbi állapotát. Mondjuk egy régi állapotnak 
    megfelelő exe-t akarok rekonstruálni. 
    
        Tiszta állapotba hozom a wt-t, a függőben levő dolgokat
        commitolom vagy letörlöm. A biztonság kedvéért kűlön
        megjegyzem a legfelső commit SHA1 id-jét. A git is megjegyzi,
        de abban az ember nem mindig ismeri ki magát. Kiválasztom 
        a sávkurzorral a megfelelő idejű commitot, a Snapshot menüvel 
        kibontom a régi állapotot (filetime-restore visszaállítja az 
        időket). A rendszer ún. detached HEAD állapotba kerül.

        Dolgozok a régi verzióban.
            
        Megcsináltam, amit akartam, vissza kell térni a jelenbe.
        A branch menüben kiválasztom a korábbi branchot, mire a
        browse tetején visszakapom az előbb levágott commitokat.
        A wt-ben azonban az előző snapshothoz tartozó tartalom van.
        Ezért a borwse felső sorával megint végrehajtom a Snapshotot,
        és a Branch menüben megint kiválasztom a kívánt branchot.
        

    Át akarom venni más fejlesztők változtatásait.
    
        Bemegyek a Fetch menübe, fetchelek egyszerre az összes 
        remoteból, vagy egyenként azokból a remoteokból, ahonnan
        változást várok.
    
        Bekerülök a fetch státusz ablakba, itt az [M] és [R] flagek
        mutatják, hova érkezett mergelhető új anyag. A sorra ráállok
        a sávkurzorral, K_CTRL_M mergel vagy K_CTRL_R rebaseel.
        
        Ha merge conflict keletkezik, a szokásos módon kell eljárni. 
        Kézzel ki kell javítani, a változást commitolni. Vagy lehet 
        választani a saját változat eldobását, ahogy írtam egy kicsit 
        feljebb.  Rebase esetén a PrepCommit menüben a Continue vagy 
        az Abort funkciókkal lehet a rebaset befejezni vagy eldobni.
        

Scriptek        

    gn inditja gitnav-ot.        
    gv inditja gitview-t.
    gr inditja gitref-et.
    gc erről részletesebben:

    A gc script a 
    
        git clean -fXd  2>&1 >/dev/null
        
    paranccsal törli az ignored fájlokat és directorykat,
    pl. az egész ppo-t, objlin-t, minden bak-ot, stb.
    Nemcsak a git directory gyökerében működik, hanem
    subdirectorykban is, tehát általános célú clean-nek
    lehet használni, érdemes azért a path-ban tartani.
    
    Az embernek vannak olyan scriptjei, emlékeztetői,
    miegymás, ami jó, ha kéznél van de nem akarom beletenni
    a commitba, hogy ne terheljek vele másokat. Ezért olyan 
    nevet adok ezeknek a fájloknak, amit a git ignorál.
    Nojó, de akkor viszont mi lesz velük, ha a gc folyton
    letörli őket. A letörlés ellen úgy védekezek, hogy
    a scriptek (személyes fájlok) eredeti változatát a 
    .git/local alá teszem (ott nem törlődnek) a git directory 
    gyökerében pedig  csak az előbbiekre mutató link van.
    Ezek a linkek tényleg törlődnek, de a gc mindig újra
    legyártaja  a linkeket.

           