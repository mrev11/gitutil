
git checkout

Zűrös dolog a checkout és reset. A funkcióikat tekintve legalább
felerészben átfedés van közöttük. Például mindkettő változtatja
a HEAD-et, mindkettő változtatja az indexet, változtatja a wt-t.
Kapcsolók sokaságával lehet szabályozni, mikor mely fájlokra
terjedjen ki a hatásuk, melyekre ne. Jól össze lehet keverni.
De nem csak a resettel van átfedésben, hanem a branch-csel is, 
meg még merge-t is végez, meg még ki tudja mit. Őszintén szólva 
az alkalmazástervezés csődjének látszik. 


I. git checkout filespec nélkül
-------------------------------

git checkout [-f] <branch>

    Átvált a <branch> ágra. Ezzel lehet váltogatni a branchok között.
    A HEAD-et átállítja a <branch> végére. Update-eli az indexet az új
    branchból. Update-eli a wt-t az indexből. A wt  módosításait
    megtartja (hacsak nincs megadva -f opció), így azokat commitolni 
    lehet az újonnan kiválasztott branch-ba.*

    ----------------------------------------------------------------------
    *Ez van a man-ban, de ez így pontatlan, így kell érteni:
    Példa: 'git co B' (A branchról váltunk B-re), miközben 
    a wt-ben lehetnek olyan fájlok, amiket az utolsó commit óta

    a) kreáltunk: 
        Megpróbálja végrehajtani a co-t, ha a B-ből kijönne egy 
        olyan fájl, ami felülírná az A-ban kreált (de nem commitolt) 
        új fájlunkat, akkor abortál, egyébként az új fájl megmarad,
        és ott lesz a B-ből elővett fájlok között.
        
        Megj: Akkor is abortál, ha a B-ből kijövő fájl pontosan
        ugyanaz, mint az új fájl, amit felülír. 


    m) módosítottunk: 
        1) Ha olyan F fájlt módosítottunk, ami benne van B-ben is, 
           és Fa==Fb, akkor az nem akadályozza  a co végrehajtását,
           F nem íródik felül, hanem F módosított változata 
           megmarad a B-ből elővett fájlok között, és git st
           módosítottnak mutatja (B-ben). 

        2) Ha olyan F fáljt módosítottunk, ami nincs benne B-ben,
           vagy Fa!=Fb, akkor a co abortál.

    d) letöröltünk: 
        1) Ha olyan F fájlt töröltünk le, ami benne van B-ben is,
           és Fa==Fb, akkor az nem akadályozza  a co végrehajtását,
           F nem állítódik vissza B-ből, hanem git st mint töröltet
           mutatja B-ben. (És visszaváltva, sem jön elő az A-ból,
           ami már csak a szimmetriából is következik.)

        2) Ha olyan F fáljt töröltünk, ami nincs benne B-ben,
           vagy Fa!=Fb, akkor a co (nem, nem abortál, hanem)
           simán átvált és a törlés hatástalan. Ha létezik Fb, 
           akkor azt előveszi. Ha  visszaváltunk A-ra, akkor újra 
           előveszi A-ból az előbb törölt Fa-t.

    A komplikált szabályok megjegyzését könnyíti, ha észrevesszük
    a szimmetriát:  Ha az A->B váltás sikeres (nem abortál), akkor 
    visszafelé (B->A) is sikeres lesz. Az ideoda váltogatás (A<->B) 
    a hatástalan törlések visszaállítása után fixpontra jut, ami
    után a wt nem változik többet.
    ----------------------------------------------------------------------

    Az ág váltása a .git/HEAD átírásával történik. Például, 
    ha a master branch-ban vagyunk,  
        .git/HEAD           tartalma  ref: refs/heads/master

    végrehajtjuk
        git branch devel    #feltesszük, hogy van ilyen

    a változás:
        .git/HEAD           új tartalma  ref: refs/heads/devel
 

git checkout [-f] <commitid>

    Hasonló, mint az előző, de így tetszőleges commit-ot előszed
    (és betölt az indexbe, és kibont a working tree-ben).
    A .git/HEAD-be közvetlenül beíródik a commitid. Ezt nevezik
    detached HEAD állapotnak. "Normál" állapotba úgy lehet 
    visszajutni, hogy végrehajtunk egy git checkout <branch>-ot.
    
    A -f (force)  opció hatására a working tree-ben levő változások
    felülíródnak.


II. git checkout filespec-cel
-----------------------------

git checkout -- <filespec>
    Az indexből előszedi <filespec>-et. Ha a fájl közben módosult,
    akkor felülíródik az index-beli változattal.

git checkout -- .
    Előszedi az indexből az összes fájlt. A wt-hez hozzáadott új fájlok
    megmaradnak, A wt-ben levő módosult fájlokat felülírja (a módosítások 
    elvesznek). A törölt fájlokat újra előveszi.



Egyebek
--------------------------------------------------------------------
git chekout #(paraméterek nélkül)

    Paraméterek nélkül nem csinál semmit, csak mutatja a változásokat.
    Felesleges, mert a git status jobban mutatja.


--------------------------------------------------------------------
Teljes visszaállás az utolsó commitra:
 
    git reset       # index<-utolsó commit
    git checkout .  # előszedi a filék utolsó commit szerinti állapotát
    git clean -fxd  # törli a plusz dolgokat
                    # -f  force
                    # -x  törli a plusz (untracked+ignored) fájlokat 
                    # -d  törli a plusz directorykat

--------------------------------------------------------------------
Megjegyzés a -f (force opciópról)

    git checkout -f <branch>
        -f nélkül nem írja felül a megváltozott fájlokat

    git checkout .
        -f nélkül is felülírja a megváltozott fájlokat

--------------------------------------------------------------------
A módosítások áramlását mutatja az alábbi diagramm:

              add                    commit
             ---->                   ---->
WORKING-TREE        STAGING-INDEX            REPO-DATABASE
             <----                   <----
            checkout                 reset

